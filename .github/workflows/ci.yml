# 🔍 股健檢 LINE Bot CI 管道
# 此工作流程提供自動化程式碼品質檢查，類似 Flutter analyze

name: CI 管道

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'functions/**'
      - '.github/workflows/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'functions/**'
      - '.github/workflows/**'
      - 'scripts/**'
  workflow_dispatch:

jobs:
  # 🎯 程式碼品質檢查
  code-quality:
    name: '程式碼品質檢查'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 📥 檢出程式碼
      uses: actions/checkout@v4

    - name: 🟢 設定 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'

    - name: 📦 安裝依賴套件
      run: cd functions && npm install

    - name: 🔍 執行 ESLint
      id: eslint
      run: cd functions && npm run lint

    - name: 🎨 檢查 Prettier 格式
      id: prettier
      run: cd functions && npm run format:check

    - name: 🏗️ 建置專案
      id: build
      run: cd functions && npm run build

    - name: 🧪 執行本地測試
      id: test
      run: cd functions && npm run local-test

    - name: 📊 產生檢查結果
      run: |
        echo "# 🚀 CI 品質報告" > ci-report.md
        echo "" >> ci-report.md
        echo "## 📊 結果摘要" >> ci-report.md
        echo "| 檢查項目 | 狀態 |" >> ci-report.md
        echo "|-------|--------|" >> ci-report.md
        echo "| ESLint | $([ "${{ steps.eslint.outcome }}" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> ci-report.md
        echo "| Prettier | $([ "${{ steps.prettier.outcome }}" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> ci-report.md
        echo "| 建置 | $([ "${{ steps.build.outcome }}" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> ci-report.md
        echo "| 測試 | $([ "${{ steps.test.outcome }}" == "success" ] && echo "✅ 通過" || echo "❌ 失敗") |" >> ci-report.md
        echo "" >> ci-report.md
        echo "## 📋 詳細資訊" >> ci-report.md
        echo "- **Node.js 版本**: $(node --version)" >> ci-report.md
        echo "- **NPM 版本**: $(npm --version)" >> ci-report.md
        echo "- **執行時間**: ${{ github.event.head_commit.timestamp }}" >> ci-report.md

    - name: 📋 上傳 CI 報告
      uses: actions/upload-artifact@v4
      with:
        name: ci-report
        path: ci-report.md
      if: always()



  # 🔒 Security Check
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Run npm audit
      run: cd functions && npm audit --audit-level moderate

    - name: 🛡️ Security Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'vuln,secret,misconfig'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📋 Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
      if: always()

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: github.ref == 'refs/heads/develop' && needs.code-quality.result == 'success'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4



  # 🏭 Deploy to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.code-quality.result == 'success'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
  # 📈 Performance Monitoring
  performance:
    name: 'Performance Check'
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📊 Bundle size analysis
      run: |
        cd functions
        if command -v webpack-bundle-analyzer >/dev/null 2>&1; then
          echo "📦 Bundle size analysis available"
          npx webpack-bundle-analyzer --format json
        else
          echo "ℹ️ Bundle analyzer not available, skipping..."
        fi

    - name: 📈 Performance metrics
      run: |
        echo "⏱️ Deployment time: $(date)"
        echo "📊 Performance metrics collection placeholder"
        # Add performance monitoring setup here later

  # 🎯 Status Check
  status-check:
    name: 'CI Status'
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: always()

    steps:
    - name: 📊 Final status
      run: |
        echo "🎯 CI Pipeline Summary"
        echo "======================"
        echo "📋 Code Quality: ${{ needs.code-quality.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "📊 Overall Status: $(
          if [ "${{ needs.code-quality.result }}" == "success" ] && \
             ([ "${{ needs.security.result }}" == "success" ] || [ "${{ needs.security.result }}" == "skipped" ]); then
            echo "✅ SUCCESS"
          else
            echo "❌ FAILED"
          fi
        )"

