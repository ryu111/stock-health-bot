# 🔍 CI Pipeline for Stock Health LINE Bot
# This workflow provides automated code quality checks, similar to Flutter analyze

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'functions/**'
      - '.github/workflows/**'
      - 'scripts/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'functions/**'
      - '.github/workflows/**'
      - 'scripts/**'
  workflow_dispatch:

jobs:
  # 🎯 Code Quality Check
  code-quality:
    name: 'Code Quality Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json

    - name: 📦 Install dependencies
      run: cd functions && npm ci

    - name: 🔍 Run ESLint
      id: eslint
      run: cd functions && npm run lint
      continue-on-error: true

    - name: 🎨 Check Prettier formatting
      id: prettier
      run: cd functions && npm run format:check
      continue-on-error: true

    - name: 🏗️ Build project
      id: build
      run: cd functions && npm run build
      continue-on-error: true

    - name: 🧪 Run local tests
      id: test
      run: cd functions && npm run local-test
      continue-on-error: true

    - name: 📊 Generate lint results
      run: |
        echo "# 🚀 CI Quality Report" > ci-report.md
        echo "" >> ci-report.md
        echo "## 📊 Results Summary" >> ci-report.md
        echo "| Check | Status |" >> ci-report.md
        echo "|-------|--------|" >> ci-report.md
        echo "| ESLint | $([ "${{ steps.eslint.outcome }}" == "success" ] && echo "✅ Pass" || echo "❌ Fail") |" >> ci-report.md
        echo "| Prettier | $([ "${{ steps.prettier.outcome }}" == "success" ] && echo "✅ Pass" || echo "❌ Fail") |" >> ci-report.md
        echo "| Build | $([ "${{ steps.build.outcome }}" == "success" ] && echo "✅ Pass" || echo "❌ Fail") |" >> ci-report.md
        echo "| Tests | $([ "${{ steps.test.outcome }}" == "success" ] && echo "✅ Pass" || echo "❌ Fail") |" >> ci-report.md
        echo "" >> ci-report.md
        echo "## 📋 Details" >> ci-report.md
        echo "- **Node.js Version**: $(node --version)" >> ci-report.md
        echo "- **NPM Version**: $(npm --version)" >> ci-report.md
        echo "- **Run Time**: ${{ github.event.head_commit.timestamp }}" >> ci-report.md

    - name: 📋 Upload CI Report
      uses: actions/upload-artifact@v4
      with:
        name: ci-report
        path: ci-report.md
      if: always()

    - name: 📡 Send Slack notification (optional)
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        fields: repo,message
        custom_payload: |
          {
            username: 'Stock Health CI',
            icon_emoji: ':robot:',
            attachments: [{
              color: '${{ (steps.eslint.outcome == 'success' && steps.prettier.outcome == 'success' && steps.build.outcome == 'success' && steps.test.outcome == 'success') && 'good' || 'danger' }}',
              text: '${{ github.event.head_commit.message }}'
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  # 🔒 Security Check
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Run npm audit
      run: cd functions && npm audit --audit-level moderate
      continue-on-error: true

    - name: 🛡️ Security Scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        scanners: 'vuln,secret,misconfig'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: 📋 Upload Trivy results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
      if: always()

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: github.ref == 'refs/heads/develop' && needs.code-quality.result == 'success'
    environment: staging

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: stock-health-staging
        channelId: live

    - name: ✅ Verify deployment
      run: |
        echo "🔍 Checking deployment status..."
        curl -f https://stock-health-staging.web.app/api/health || echo "⚠️ Health check failed but continuing..."
        echo "✅ Staging deployment completed"

  # 🏭 Deploy to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.code-quality.result == 'success'
    environment: production

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: stock-health-app

    - name: 🔥 Deploy Functions
      run: |
        npm install -g firebase-tools
        firebase deploy --only functions --project stock-health-app --token ${{ secrets.FIREBASE_TOKEN }}

    - name: ✅ Post-deployment verification
      run: |
        echo "🔍 Running post-deployment checks..."
        sleep 30  # Wait for deployment to propagate
        curl -f "https://us-central1-stock-health-app.cloudfunctions.net/api/health" \
          -H "Authorization: Bearer ${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" || {
            echo "❌ Health check failed"
            exit 1
          }
        echo "✅ Production deployment completed successfully"

  # 📈 Performance Monitoring
  performance:
    name: 'Performance Check'
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📊 Bundle size analysis
      run: |
        cd functions
        if command -v webpack-bundle-analyzer >/dev/null 2>&1; then
          echo "📦 Bundle size analysis available"
          npx webpack-bundle-analyzer --format json
        else
          echo "ℹ️ Bundle analyzer not available, skipping..."
        fi

    - name: 📈 Performance metrics
      run: |
        echo "⏱️ Deployment time: $(date)"
        echo "📊 Performance metrics collection placeholder"
        # Add performance monitoring setup here later

  # 🎯 Status Check
  status-check:
    name: 'CI Status'
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: always()

    steps:
    - name: 📊 Final status
      run: |
        echo "🎯 CI Pipeline Summary"
        echo "======================"
        echo "📋 Code Quality: ${{ needs.code-quality.result }}"
        echo "🔒 Security: ${{ needs.security.result }}"
        echo "📊 Overall Status: $(
          if [ "${{ needs.code-quality.result }}" == "success" ] && \
             ([ "${{ needs.security.result }}" == "success" ] || [ "${{ needs.security.result }}" == "skipped" ]); then
            echo "✅ SUCCESS"
          else
            echo "❌ FAILED"
          fi
        )"

  # 💬 PR Comment (for Pull Requests only)
  pr-comment:
    name: 'PR Comment'
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'pull_request'

    steps:
    - name: 💬 Add PR comment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `
          ## 🤖 CI Quality Check Results

          ### 📊 Status Summary
          - **ESLint**: ${{ steps.eslint.outcome == 'success' && '✅ Passed' || '❌ Failed'}}
          - **Prettier**: ${{ steps.prettier.outcome == 'success' && '✅ Passed' || '❌ Failed'}}
          - **Build**: ${{ steps.build.outcome == 'success' && '✅ Passed' || '❌ Failed'}}
          - **Tests**: ${{ steps.test.outcome == 'success' && '✅ Passed' || '❌ Failed'}}

          ### 🔧 Next Steps
          ${steps.eslint.outcome != 'success' ? '- Run `npm run lint:fix` to fix linting issues\n' : ''}${steps.prettier.outcome != 'success' ? '- Run `npm run format` to fix formatting issues\n' : ''}${steps.build.outcome != 'success' ? '- Check build configuration\n' : ''}${steps.test.outcome != 'success' ? '- Fix test failures\n' : ''}

          [View full CI results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ---
          *This comment was automatically generated by CI Quality System*
          `
          })